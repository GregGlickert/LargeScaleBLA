//################################################################//
//# GUI Built using BMTools (https://github.com/tjbanks/bmtools) #//
//# Tyler Banks (tyler@tylerbanks.net)                           #//
//# Neural Engineering Laboratory (Prof. Satish Nair)            #//
//# University of Missouri, Columbia                             #//
//# Build time: 08/05/2020 21:07:55                              #//
//################################################################//

{load_file("stdrun.hoc")}
{load_file("nrngui.hoc")}

//Loading mechanisms in other folder
nrn_load_dll("../../components/mechanisms/x86_64/.libs/libnrnmech.so")
nrn_load_dll("../../components/mechanisms/nrnmech.dll")

// Load Template(s) (some may not be needed if a folder was specified and may cause problems, remove as needed)
//{load_file("./components/templates/Feng_PVbasketcell.hoc")}
//{load_file("./components/templates/spwr_templates.hoc")}
{load_file("../../components/templates/feng.hoc")}

tstop = 250
v_init = -65
objref Cell // declare the primary cell object
//Cell = new Cell_C() // build the neuron from template
Cell = new Cell_Cf()//feng_typeC()

NumClamps = 0
NumStims = 1
NumNetcons = 1
NumSynapses = 1
NumOtherCells = 0
NumVClamps = 1

//objref ccl[NumClamps]
objref stim[NumStims]
objref nc[NumNetcons]
objref syn[NumSynapses]
//objref auxcell[NumOtherCells]
objref vclamp[NumVClamps]


//netstim for synapse
stim[0]=new NetStim(0.5)
stim[0].interval=24 // ms (mean) time between spikes
stim[0].number=5 //(average) number of spikes
stim[0].start=50 // ms (most likely) start time of first spike
stim[0].noise=0.0 // range 0 to 1. Fractional randomness.

Cell.dend[0] syn[0] = new pyrD2pyrD_STFD(0.9)
syn[0].initW = 9

delay = 0

nc[0] = new NetCon(stim[0],syn[0],1,delay,1)

//Cell.soma vclamp[0] = new SEClamp(0.5)
//vclamp[0].apmp1 = v_init
//vclamp[0].dur1 = 9999

strdef tstr0, tstr1,tstr2,tstr3

//Window 1 variables
strdef Window1BoxTitle
Window1SubVBoxNum = 3
objref Window1HBoxObj,Window1SubVBoxObj[Window1SubVBoxNum]


proc DisplayWindow1() { local i

    Window1BoxTitle = "Cell_C - Cell Configurator - Interface generated by BMTools (https://github.com/tjbanks/bmtools)"
    Window1HBoxObj = new HBox()
    for i=0,Window1SubVBoxNum-1 Window1SubVBoxObj[i] = new VBox()

    // Column1
    Window1SubVBoxObj[0].intercept(1)
        // Widget1
        newPlot(0,250,-80,50)
        graphItem.save_name("graphList[0].")
        graphList[0].append(graphItem)
        sprint(tstr1,"%s.soma[0].v(0.5)","Cell")
        graphItem.addexpr(tstr1,1,1)
        
        // Widget2
        newPlot(0,250,-80,50)
        graphItem.save_name("graphList[0].")
        graphList[0].append(graphItem)
        sprint(tstr1,"%s.soma[0].v(0.5)","Cell")
        graphItem.addexpr(tstr1,1,1)
        
    Window1SubVBoxObj[0].intercept(0)

    // Column2
    Window1SubVBoxObj[1].intercept(1)
        // Widget1
        Cell.soma[0] nrnsecmenu(0.5,1)
        // Widget2
        Cell.dend[0] nrnsecmenu(0.5,1)
        // Widget3
        Cell.apic[0] nrnsecmenu(0.5,1)
    Window1SubVBoxObj[1].intercept(0)

    // Column3
    Window1SubVBoxObj[2].intercept(1)
        // Widget1
        nrncontrolmenu()
        // Widget2
        nrnpointmenu(syn[0])
        // Widget3
        nrnpointmenu(stim[0])
    Window1SubVBoxObj[2].intercept(0)

    Window1HBoxObj.intercept(1)
        for i=0,Window1SubVBoxNum-1 Window1SubVBoxObj[i].map()
    Window1HBoxObj.intercept(0)
    Window1HBoxObj.map(Window1BoxTitle,0,0,1100,600)

}// end DisplayWindow1()

Cell.insert_mechs(123)
DisplayWindow1()
