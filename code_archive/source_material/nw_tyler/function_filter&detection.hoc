// Created by FF (2018)
filter_order=2    ///for phase detection filter order
filter_order_amp=4  ///for amp detection filter order

////phase detection filter
func filter_realtime() { local seq_electrode,order,mmm,filtered_value localobj LFP_temp_list,LFP_filtered_list,LFP_snippet,LFP_filtered_snippet,aFilt,bFilt
  LFP_temp_list=$o1
  LFP_filtered_list=$o2
  order=$3
  seq_electrode=$4
  
  ////filter parameters from matlab////
  bFilt=new Vector(2*order+1)
  aFilt=new Vector(2*order+1)
  
  bFilt.x[0]=0.00782020803349800//0.00782020803349956 //8.63844915279016e-06
  bFilt.x[1]=0	
  bFilt.x[2]=-0.0156404160669952//-0.0156404160669991 //-0.00724336302985550//1.72768983055803e-05
  bFilt.x[3]=0	
  bFilt.x[4]=0.00782020803349758//0.00782020803349956 //0.00362168151492775//8.63844915279016e-06
  
  aFilt.x[0]=1	
  aFilt.x[1]=-3.52959612573327//-3.48793980138064  //-3.56127922522600//-3.99145419571055//
  aFilt.x[2]=4.86146384260878//4.78809577765930   //4.99912436309223//5.97461349471255
  aFilt.x[3]=-3.08731348123210//-3.05087698051894  //-3.25791125356514//-3.97486348356814
  aFilt.x[4]=0.766006600943264//0.766006600943264  //0.837181651256021//0.991704196170503
  
  ///////////
  LFP_snippet=new Vector(1+2*order)
  //print LFP.size()
  for mmm=0,2*order {
  LFP_snippet.x[mmm]=LFP_temp_list.o(LFP_temp_list.count()-1-mmm).x[seq_electrode]
  }
  //LFP_snippet=LFP_snippet.reverse()
  
  LFP_filtered_snippet=new Vector(2*order)
  for mmm=0,2*order-1 {
  LFP_filtered_snippet.x[mmm]=LFP_filtered_list.o(LFP_filtered_list.count()-1-mmm).x[seq_electrode]
  }
  
   LFP_filtered_snippet.mul(aFilt.at(1,aFilt.size()-1))
   LFP_snippet.mul(bFilt)
  //filtered_signal_snippet=filtered_signal.at(filtered_signal.size()-1-2*filter_order+1,filtered_signal.size()-1)
  //filtered_signal_snippet=filtered_signal_snippet.reverse()
  //temp=bFilt.x[0]*LFP(n)+bFilt.x[1]*data_LFP_fill(n-1)+bFilt.x[2]*data_LFP_fill(n-2)+bFilt.x[3]*data_LFP_fill(n-3)+bFilt.x[4]*LFP_snippet.x[0]...
       //-aFilt(2)*y(n-1)-aFilt(3)*y(n-2)-aFilt(4)*y(n-3)-aFilt(5)*y(n-4);
       //print LFP_snippet.size(),filtered_signal_snippet.size()
 
  
  filtered_value=LFP_snippet.sum()-LFP_filtered_snippet.sum()   ///filtered LFP at current time step
  //print temp
  //filtered_signal.append(temp)
  //filtered_signal.printf
  return filtered_value
}

////amp detection filter
func filter_realtime_amp() { local seq_electrode,order,mmm,filtered_value localobj LFP_temp_list,LFP_filtered_list,LFP_snippet,LFP_filtered_snippet,aFilt,bFilt
  LFP_temp_list=$o1
  LFP_filtered_list=$o2
  order=$3
  seq_electrode=$4
  
  ////filter parameters from matlab////
  bFilt=new Vector(2*order+1)
  aFilt=new Vector(2*order+1)
  
  bFilt.x[0]=6.23869835597624e-05
  bFilt.x[1]=0	
  bFilt.x[2]=-0.000249547934239050	
  bFilt.x[3]=0	
  bFilt.x[4]=0.000374321901358574 
  bFilt.x[5]=0
  bFilt.x[6]=-0.000249547934239050
  bFilt.x[7]=0
  bFilt.x[8]=6.23869835597624e-05
  
  aFilt.x[0]=1
  aFilt.x[1]=-7.09542139124417	
  aFilt.x[2]=22.4110023896101
  aFilt.x[3]=-41.1266347959311	
  aFilt.x[4]=47.9426920257148
  aFilt.x[5]=-36.3505909936541
  aFilt.x[6]=17.5085493184613
  aFilt.x[7]=-4.90001758363803
  aFilt.x[8]=0.610534807561225
  
  ///////////
  LFP_snippet=new Vector(1+2*order)
  //print LFP.size()
  for mmm=0,2*order {
  LFP_snippet.x[mmm]=LFP_temp_list.o(LFP_temp_list.count()-1-mmm).x[seq_electrode]
  }
  //LFP_snippet=LFP_snippet.reverse()
  
  LFP_filtered_snippet=new Vector(2*order)
  for mmm=0,2*order-1 {
  LFP_filtered_snippet.x[mmm]=LFP_filtered_list.o(LFP_filtered_list.count()-1-mmm).x[seq_electrode]
  }
  
   LFP_filtered_snippet.mul(aFilt.at(1,aFilt.size()-1))
   LFP_snippet.mul(bFilt)
  //filtered_signal_snippet=filtered_signal.at(filtered_signal.size()-1-2*filter_order+1,filtered_signal.size()-1)
  //filtered_signal_snippet=filtered_signal_snippet.reverse()
  //temp=bFilt.x[0]*LFP(n)+bFilt.x[1]*data_LFP_fill(n-1)+bFilt.x[2]*data_LFP_fill(n-2)+bFilt.x[3]*data_LFP_fill(n-3)+bFilt.x[4]*LFP_snippet.x[0]...
       //-aFilt(2)*y(n-1)-aFilt(3)*y(n-2)-aFilt(4)*y(n-3)-aFilt(5)*y(n-4);
       //print LFP_snippet.size(),filtered_signal_snippet.size()
 
  
  filtered_value=LFP_snippet.sum()-LFP_filtered_snippet.sum()   ///filtered LFP at current time step
  //print temp
  //filtered_signal.append(temp)
  //filtered_signal.printf
  return filtered_value
}       
 
 
func detect() { local electro_seq,t_window,type,mmm,thres,trigNow localobj LFP_filtered_list,LFP_filtered_snippet,LFP_filtered_diff,peaktimes,troughtimes,peaktroughtimes,conv_temp,amplogic,last,LFP_filtered_list_amp,LFP_filtered_snippet_amp
  
  LFP_filtered_list=$o1
  //print LFP_filtered_list.count()
  t_window=$2
  thres=$3
  type=$4    ///detect type
  electro_seq=$5   ///choose which electrode to detect
  sigv=$6    ////how many peaks&trough needs to be significant
  //LFP_filtered_list_amp=$o7 ///for amp detection
  
  peaktimes= new Vector()
  troughtimes=new Vector()
  peaktroughtimes=new Vector()
  conv_temp=new Vector()
  last=new Vector()  ////to store last peak and troughs index in window
  amplogic=new Vector(sigv) ////to store last peak and troughs amp logic in window
     
  ///////////
  //LFP_snippet=new Vector(1+2*order)
  //print LFP.size()
  //for mmm=0,2*order {
  //LFP_snippet.x[mmm]=LFP_temp_list.o(LFP_temp_list.count()-1-mmm).x[seq_electrode]
  //}
  //LFP_snippet=LFP_snippet.reverse()
  
  LFP_filtered_snippet=new Vector(t_window)
  //LFP_filtered_snippet_amp=new Vector(t_window)
  LFP_filtered_diff=new Vector(t_window-1)   ///to store difference
  
  for mmm=0,t_window-1 { 
  
  LFP_filtered_snippet.x[mmm]=LFP_filtered_list.o(LFP_filtered_list.count()-1-t_window+1+mmm).x[electro_seq]
//LFP_filtered_snippet_amp.x[mmm]=LFP_filtered_list_amp.o(LFP_filtered_list_amp.count()-1-t_window+1+mmm).x[electro_seq]
    if (mmm>=1) {
    diff=LFP_filtered_snippet.x[mmm]-LFP_filtered_snippet.x[mmm-1]    ////same as Drew, lag-previous

       if (diff<0) {
     LFP_filtered_diff.x[mmm-1]=-1   ////at desending phase
       } else if (diff>0) {
     LFP_filtered_diff.x[mmm-1]=1    ////at asending phase
      } else {
       LFP_filtered_diff.x[mmm-1]=0  
       }
                 }
                       }
           
//print "LFP_f_snip ", LFP_filtered_snippet.printf
//print "diff ", LFP_filtered_diff.printf


     /////finding peaks and troughs/////
     for kkk=0,LFP_filtered_diff.size()-1-1 {    ////convlve with [-1 1]
        conv=LFP_filtered_diff.x[kkk]-LFP_filtered_diff.x[kkk+1]
        conv_temp.append(conv)
        if (conv>0) {  ///peak
         peaktimes.append(kkk)
         peaktroughtimes.append(kkk)  ///put trough and peak together       
           } else if (conv<0) {  ///trough
         troughtimes.append(kkk)
         peaktroughtimes.append(kkk)  ///put trough and peak together         
                    }
                                             }
                                             //print "conv: ", conv_temp.printf
         //print "t", t 
         //print "trough: " troughtimes.printf  
         //print "trough: " peaktimes.printf 
         
     if (peaktroughtimes.size()>=sigv) { 
     last=peaktroughtimes.at(peaktroughtimes.size()-sigv,peaktroughtimes.size()-1)
     
      for nnn=0,last.size()-1 {
      //print "last: ", last.x[nnn]
      //print "filter_snippet: ", LFP_filtered_snippet.size
      //print "time cross: ", t
      //print "filtered sign",LFP_filtered_snippet.printf
      //print "coress thre:", LFP_filtered_snippet.x[last.x[nnn]]
           if (abs(LFP_filtered_snippet.x[last.x[nnn]])>=thres) {
             //if (abs(LFP_filtered_snippet_amp.x[last.x[nnn]])>=thres) {
                     amplogic.x[nnn]=1   ///to judge whether cross threshold
                      } else {
                      amplogic.x[nnn]=0 ///to judge whether cross threshold
                              }
                                }
                                }
         
     if (peaktimes.size()+troughtimes.size() < sigv) {
        trigNow = 0
        } else if (amplogic.sum()==sigv) {    ////if meets last requirement
        
        if (type==2) {       ////find peak     
         if (peaktimes.size()>=1) {
                   if (peaktimes.x[peaktimes.size()-1] == t_window-1-1-1) {
                    trigNow = 1 
                    } else {
                    trigNow = 0 
                    }         
                                   } else {
                     trigNow = 0  }                                   
          } else if (type==1) {
         if (troughtimes.size()>=1) {
                   if (troughtimes.x[troughtimes.size()-1] == t_window-1-1-1) {
                    trigNow = 1 
                    } else {
                    //print "window:", troughtimes.x[troughtimes.size()-1]
                    trigNow = 0 
                    }         
                                   } else {
                     trigNow = 0   }
                              } 
                                                     
                                            } else { ////if dones't meets last requirement
                                      trigNow = 0    
                                            }
  return trigNow
}